#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name bacteria2tfbs can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# bacteria2tfbs nor may bacteria2tfbs appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"

from Bio import SeqIO
from bacteria2tfbs import *

################################################################################
# Read options

def getOptions():
    import argparse

    # create the top-level parser
    description = ("Get the upstream regions of all CDS, "+
                    "given an annotated genbank file")
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument('genome', action="store",
                            help='Genome GenBank file')
    parser.add_argument('-u', '--upstream', action='store',
                        type=int,
                        default=400,
                        help='Upstream region size [Default: 400bp]')
    parser.add_argument('-d', '--downstream', action='store',
                        type=int,
                        default=0,
                        help='Upstream region size [Default: 0bp]')
    parser.add_argument('-l', '--linear', action="store_true",
                            default=False,
                        help='Linear or draft genome')
    
    return parser.parse_args()

################################################################################
# Main

if __name__ == "__main__":
    options = getOptions()

    for s in SeqIO.parse(open(options.genome), 'genbank'):
        for up in get_upstreams(s, options.upstream, options.downstream,
                                not options.linear):
            
            print('>%s %d %d %d %s'%(up[0], len(up[1]), up[2], up[3], up[4]))
            print('%s'%up[1])
